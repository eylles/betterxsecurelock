#!/bin/sh

#####################
# --- conf vars --- #
#####################

auth_font="Noto Sans CJK JP"
password_prompt="disco"
show_hostname=0
show_username=1
burnin_mitigation=50
burnin_mitigation_pixels=1

if [ -r "$CONF" ]; then
    # yes, we just outright source the config file without caring...
    # you can only override things written before this, so no arbitrary
    # functions from config
    . "$CONF"
fi

#####################
# --- variables --- #
#####################

# type:        string
# description
#   script base name through the idiom "${0##*/}"
myname="${0##*/}"

# type:        int
# description
#   current running pid of the script
mypid="$$"

# color  0
# type: hex string
 color0=""
# color  2
# type: hex string
 color2=""
# color  8
# type: hex string
 color8=""
# color 10
# type: hex string
color10=""
# color 12
# type: hex string
color12=""
# color 15
# type: hex string
color15=""

# type:        int
# description:
#   randomly chosen color index
COLO_OPT=$(shuf -n 1 -e 1 2 3 4 5)

# type:        hex string
# description:
#   color used for auth background
AuthBgColor=""

# type:        hex string
# description:
#   color used for auth foreground
AuthFgColor=""

# type:        int
# description:
#   pid of current xsecurelock instance
xsecurelock_pid=""

# type:        int
# description:
#   pid of launched dimmer
dimmer_pid=""

#####################
# --- functions --- #
#####################

# return type: boolean
# usage: is_int "value"
# description: check if passed value is a number
is_int() {
    if [ -n "$1" ]; then
        printf %d "$1" >/dev/null 2>&1
    else
        return 1
    fi
}

# thin awk wrapper that will prefer mawk over gawk
u_awk () { awk "$@"; }
if command -v mawk >/dev/null; then
    u_awk () { mawk "$@"; }
fi

# usage: pid_tree_search PID NAME
#      PID: the parent pid among whose ps tree we will search
#     NAME: the name of the program whose pid we want
# return type: integer
# return error: standard error return value 1
pid_tree_search () {
    search_pid="$1"
    search_name="$2"
    word_length="${#search_name}"
    rval=$(
        pstree -Aps "${search_pid}" \
        | u_awk \
            -v name="$search_name" \
            -v wlen="$word_length" \
            '\
                BEGIN { search=name"\\([[:digit:]]*\\)" } \
                match( $0, search )\
                {\
                    print substr($0,RSTART+wlen+1,RLENGTH-wlen-2) \
                }\
            '
        )
    if is_int "$rval"; then
        printf '%s\n' "$rval"
    else
        return 1
    fi
}

# return type: void
# description:
#   kill dim-screen.sh process
#   that may be dangling from previous instances
kill_dangling_dimmers () {
    if pid_tree_search "$LOCKERD_PID" "dim-screen.sh" > /dev/null; then
        dangling_dim_screen_pid=$(pid_tree_search "$LOCKERD_PID" dim-screen.sh)
        dimmer_comm=$(ps -p "$dangling_dim_screen_pid" -o command=)
        kill "$dangling_dim_screen_pid"
        printf '[%s] %s: dangling "%s" PID: %s killed.\n' \
            "$(date +"%F %T")" "${myname}" \
            "${dimmer_comm##*/}" \
            "$dangling_dim_screen_pid"
    fi
}

# return type: void
# description:
#   start xsecurelock and capture it's pid
start_xsecurelock () {
    # from config
    export XSECURELOCK_FONT="$auth_font"
    export XSECURELOCK_PASSWORD_PROMPT="$password_prompt"
    export XSECURELOCK_SHOW_HOSTNAME="$show_hostname"
    export XSECURELOCK_SHOW_USERNAME="$show_username"
    export XSECURELOCK_BURNIN_MITIGATION="$burnin_mitigation"
    export XSECURELOCK_BURNIN_MITIGATION_DYNAMIC="$burnin_mitigation_pixels"
    # defined at runtime
    export XSECURELOCK_AUTH_TIMEOUT="$SAVER_TIMEOUT"
    export XSECURELOCK_AUTH_BACKGROUND_COLOR="$AuthBgColor"
    export XSECURELOCK_AUTH_FOREGROUND_COLOR="$AuthFgColor"
    # constants
    export XSECURELOCK_SAVER="${HOME}/.local/bin/saver.sh"
    export XSECURELOCK_SAVER_RESET_ON_AUTH_CLOSE=1
    export XSECURELOCK_COMPOSITE_OBSCURER=0
    export XSECURELOCK_NO_COMPOSITE=1
    export XSECURELOCK_BLANK_TIMEOUT=-1
    export XSECURELOCK_SAVER_STOP_ON_BLANK=1
    export XSECURELOCK_BLANK_DPMS_STATE=off
    xsecurelock 2>/dev/null &
    xsecurelock_pid=$!
    sleep 1
    if ps -p "$xsecurelock_pid" -o cmd | grep -q "xsecurelock" ; then
        printf '[%s] %s: launched %s PID: %s \n' \
            "$(date +"%F %T")" \
            "${myname}" \
            "$(ps -p $xsecurelock_pid -o command=)" "$xsecurelock_pid"
    else
        printf '[%s] %s: xsecurelock start failed, trying again.\n' \
            "$(date +"%F %T")" "${myname}"
        start_xsecurelock
    fi
}

if pid_tree_search "$LOCKERD_PID" "xsecurelock" >/dev/null; then
    instance_pid=$(pid_tree_search "$LOCKERD_PID" "xsecurelock")
    printf '[%s] %s: %s %s %s\n' \
        "$(date +"%F %T")"  "${myname}" \
        "xsecurelock instance" \
        "$instance_pid" \
        "already running, no new instance will be launched."
    exit
else
    printf '[%s] %s: no xsecurelock instance running.\n' \
        "$(date +"%F %T")" "${myname}"
    printf '[%s] %s: starting screenlocking.\n' \
        "$(date +"%F %T")" "${myname}"
    . "${HOME}/.cache/wal/colors.sh"
    export SAVER_OPT="$COLO_OPT"
    case "${COLO_OPT}" in
        1) export AuthBgColor="$color0" ;;
        2) export AuthBgColor="$color2" ;;
        3) export AuthBgColor="$color8" ;;
        4) export AuthBgColor="$color10" ;;
        5) export AuthBgColor="$color15" ;;
    esac
    case "${COLO_OPT}" in
        1) export AuthFgColor="$color12" ;;
        2) export AuthFgColor="$color15" ;;
        3) export AuthFgColor="$color15" ;;
        4) export AuthFgColor="$color0" ;;
        5) export AuthFgColor="$color8" ;;
    esac

    start_xsecurelock

    kill_dangling_dimmers
    # auth watcher
    while pid_tree_search "$mypid" xsecurelock >/dev/null; do
        if pid_tree_search "$mypid" auth_x11 >/dev/null; then
            # kill_dangling_dimmers
            if kill -0 "$dimmer_pid" 2>/dev/null; then
                dimmer_comm=$(ps -p "$dimmer_pid" -o command=)
                kill -0 "$dimmer_pid" 2>/dev/null && \
                kill "$dimmer_pid" 2>/dev/null && \
                printf '[%s] %s: "%s" PID: %s killed.\n' \
                    "$(date +"%F %T")" \
                    "${myname}" \
                    "${dimmer_comm##*/}" \
                    "$dimmer_pid"
            fi
        else
            if ! pid_tree_search "$mypid" dim-screen.sh >/dev/null; then
                dim-screen.sh -step-time 0.2 &
                dimmer_pid=$(pid_tree_search "$LOCKERD_PID" "dim-screen.sh")
            fi
        fi
        sleep 0.1
    done
    kill_dangling_dimmers
fi
printf '[%s] %s: screen unlocked.\n' \
    "$(date +"%F %T")" "${myname}"
