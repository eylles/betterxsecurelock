#!/bin/sh

# type:        string
# description
#   script base name through the idiom "${0##*/}"
myname="${0##*/}"

# type:        int
# description
#   current running pid of the script
mypid="$$"

export LOCKERD_PID=$mypid

DBGOUT=""
TIME_TO_LOCK=""
xsslock_pid=""
NO_CONTINUE=""

logdir="${HOME}/.local/state/better-xsecurelock"
if [ ! -f "$logdir" ]; then
    mkdir -p "$logdir"
fi
logfile="${logdir}/${myname}"

write_log () {
    name="$myname"
    message="$1"
    printf '[%s] %s: %s\n' \
        "$(date +'%Y-%m-%d %H:%M:%S')" \
        "$name" \
        "$message" \
        >> "$logfile"
}

# return type: boolean
# usage: is_int "value"
# description: check if passed value is a number
is_int() {
    if [ -n "$1" ]; then
        printf %d "$1" >/dev/null 2>&1
    else
        return 1
    fi
}

# usage: pid_tree_search PID NAME
#      PID: the parent pid among whose ps tree we will search
#     NAME: the name of the program whose pid we want
# return type: integer
# return error: standard error return value 1
pid_tree_search () {
    search_pid="$1"
    search_name="$2"
    word_length="${#search_name}"
    rval=$(
        pstree -Aps "${search_pid}" \
        | awk \
            -v name="$search_name" \
            -v wlen="$word_length" \
            '\
                BEGIN { search=name"\\([[:digit:]]*\\)" } \
                match( $0, search )\
                {\
                    print substr($0,RSTART+wlen+1,RLENGTH-wlen-2) \
                }\
            '
        )
    if is_int "$rval"; then
        printf '%s\n' "$rval"
    else
        return 1
    fi
}

write_log "started with pid: ${mypid}."

# default 600 seconds
# but config value will
# be used if set
TIME=600

# ~/.config/better-xsecurelock/
CONFIG_DIR="${XDG_CONFIG_HOME:-~/.config}/better-xsecurelock"
#config file
CONF="${CONFIG_DIR}/config"

outHandler () {
    [ "$DBGOUT" = 1 ] && echo "exiting on signal: $1"
    # kill "$xsslock_pid"
    NO_CONTINUE=1
    # exit
}

# Usage: getval "KEY" file
# Return: string
# Description:
#   Read a KEY=VALUE file and retrieve the Value of the passed KEY
getval(){
  # Setting 'IFS' tells 'read' where to split the string.
  while IFS='=' read -r key val; do
    # Skip over lines containing comments.
    # (Lines starting with '#').
    [ "${key##\#*}" ] || continue

    # '$key' stores the key.
    # '$val' stores the value.
    if [ "$key" = "$1" ]; then
      printf '%s\n' "$val"
    fi
  done < "$2"
}

load_config () {
    if [ -r "$CONF" ]; then
        # . "$CONF"
        [ -n "$DBGOUT" ] && printf '%s: %s\n' "$myname" "config loaded"
        TIME_TO_LOCK=$(getval "TIME_TO_LOCK" "$CONF")
        [ -n "$TIME_TO_LOCK" ] && TIME=$TIME_TO_LOCK
    fi
}

set_time () {
    load_config
    [ -n "$DBGOUT" ] && printf '%s: %s\n' "${myname} time" "$TIME"
    # screensaver time
    # <timeout> <cycle>
    time_ss="$((TIME - (TIME / 5) )) $(( TIME / 5 ))"
    # dpms time
    # <standby> <suspend> <off>
    time_dpms="0 0 $((TIME * 3 / 2))"

    [ -n "$DBGOUT" ] && printf '%20s: %s\n' "time screensaver" "$time_ss"
    [ -n "$DBGOUT" ] && printf '%20s: %s\n' "time dpms" "$time_dpms"

    # we want word splitting here
    # shellcheck disable=SC2086
    xset s ${time_ss}
    # shellcheck disable=SC2086
    xset dpms ${time_dpms}
    write_log "set time s as: ${time_ss} and dpms as: ${time_dpms}"
}

sigHandler () {
    [ -n "$DBGOUT" ] && printf '%s: %s\n' "${myname} received signal" "$1"
    write_log "$1 received"
    set_time
}

# input parsing
while [ "$#" -gt 0 ]; do
    case "$1" in
        debug)   DBGOUT=1  ;;
        *) echo "${myname}: error, invalid argument: ${1}" ;;
    esac
    shift
done

set_time

xss-lock -n dim-screen.sh -s "$XDG_SESSION_ID" -l -v -- screenlocker 2>&1 \
    | cat >> "$logfile" &
# capture pid
# a simple $! is not enough thanks to using sed...
xsslock_pid=$(pid_tree_search "${mypid}" "xss-lock")
write_log "xss-lock pid captured as ${xsslock_pid}"

trap 'sigHandler "HUP"' HUP
trap 'sigHandler "USR1"' USR1
trap 'outHandler "EXIT"' EXIT
trap 'outHandler "TERM"' TERM
trap 'outHandler "INT"' INT
trap 'outHandler "QUIT"' QUIT

should_set_time () {
    xset q | \
        awk  \
        '
            /timeout/ {
            if (($2!=0) && ($2==$4)) print "1";
            else print "0";
            }
        '
}

write_log "waiting for xss-lock"
# 5 cycles per second, 60 seconds per minute, 60 minutes
INTERVAL=$(( 5 * 60 * 60 ))
# 5 cycles per second, 20 seconds
cyc=$(( 5 * 20 ))
while [ -z "$NO_CONTINUE" ]; do
    # is the count of cycle iterations the same as the interval?
    if [ "$count" = "$INTERVAL" ]; then
        write_log "running"
        # reset the count to 0
        count=0
    fi
    # check if we need to set time
    if [ $(( count % cyc )) -eq 0 ]; then
        if [ "$(should_set_time)" -eq "1" ]; then
            write_log "incorrect time setting detected"
            set_time
        fi
    fi
    # ingrement the count
    count=$(( count + 1 ))
    # the duty cycle of this daemon is 5 iterations per second
    # this is fast enough to feel responsive to signals, yet not hog
    # resources, mainly cpu
    sleep 0.2
done

write_log "no continue received"

kill "$xsslock_pid"
write_log "xss-lock killed"
[ -n "$DBGOUT" ] && printf '%s: %s\n' "${myname} killed" "xss-lock"
write_log "terminating."
