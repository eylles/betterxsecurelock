#!/bin/sh

myname="${0##*/}"
mypid="$$"

DBGOUT=""
TIME_TO_LOCK=""
xsslock_pid=""
NO_CONTINUE=""

logdir="${HOME}/.local/state/better-xsecurelock"
if [ ! -f "$logdir" ]; then
    mkdir -p "$logdir"
fi
logfile="${logdir}/${myname}"

write_log () {
    name="$myname"
    mesage="$1"
    printf '[%s] %s: %s\n' \
        "$(date +'%Y-%m-%d %H:%M:%S')" \
        "$name" \
        "$mesage" \
        >> "$logfile"
}

write_log "started with pid: ${mypid}."

# default 600 seconds
# but config value will
# be used if set
TIME=600

# ~/.config/better-xsecurelock/
CONFIG_DIR="${XDG_CONFIG_HOME:-~/.config}/better-xsecurelock"
#config file
CONF="${CONFIG_DIR}/config"

outHandler () {
    [ "$DBGOUT" = 1 ] && echo "exiting on signal: $1"
    # kill "$xsslock_pid"
    NO_CONTINUE=1
    # exit
}

load_config () {
    if [ -r "$CONF" ]; then
        . "$CONF"
        [ -n "$DBGOUT" ] && printf '%s: %s\n' "$myname" "config loaded"
        TIME="$TIME_TO_LOCK"
    fi
}

set_time () {
    load_config
    [ -n "$DBGOUT" ] && printf '%s: %s\n' "${myname} time" "$TIME"
    # screensaver time
    # <timeout> <cycle>
    time_ss="$((TIME - (TIME / 5) )) $(( TIME / 5 ))"
    # dpms time
    # <standby> <suspend> <off>
    time_dpms="0 0 $((TIME * 3 / 2))"

    [ -n "$DBGOUT" ] && printf '%20s: %s\n' "time screensaver" "$time_ss"
    [ -n "$DBGOUT" ] && printf '%20s: %s\n' "time dpms" "$time_dpms"

    # we want word splitting here
    # shellcheck disable=SC2086
    xset s ${time_ss}
    # shellcheck disable=SC2086
    xset dpms ${time_dpms}
    write_log "set time s as: ${time_ss} and dpms as: ${time_dpms}"
}

hupHandler () {
    write_log "hup recieved"
    set_time
}

# input parsing
while [ "$#" -gt 0 ]; do
    case "$1" in
        debug)   DBGOUT=1  ;;
        *) echo "${myname}: error, invalid argument: ${1}" ;;
    esac
    shift
done

set_time

xss-lock -n dim-screen.sh -s "$XDG_SESSION_ID" -l -v -- screenlocker 2>&1 \
    | sed -e "s/^/\[$(date +'%Y-%m-%d %H:%M:%S')\] xss-lock: /" >> "$logfile" &
# capture pid
# a simple $! is not enough thanks to using sed...
xsslock_pid=$(pstree -Aps "${mypid}" \
    | awk '\
        match($0, /xss-lock\([[:digit:]]*)/)\
        {\
          print substr($0,RSTART+9,RLENGTH-10) \
        }\
      ')
write_log "xss-lock pid captured as ${xsslock_pid}"

trap hupHandler HUP
trap 'outHandler "EXIT"' EXIT
trap 'outHandler "TERM"' TERM
trap 'outHandler "INT"' INT
trap 'outHandler "QUIT"' QUIT

write_log "waiting for xss-lock"
while [ -z "$NO_CONTINUE" ]; do
    # 5 cycles per second, 60 seconds per minute, 5 minutes
    INTERVAL=$(( 5 * 60 * 5 ))
    # is the count of cycle iterations the same as the interval?
    if [ "$count" = "$INTERVAL" ]; then
        write_log "running"
        # reset the count to 0
        count=0
    fi
    # ingrement the count
    count=$(( count + 1 ))
    # the duty cycle of this daemon is 5 iterations per second
    # this is fast enough to feel responsive to signales, yet not hog
    # resources, mainly cpu
    sleep 0.2
done

write_log "no continue recieved"

kill "$xsslock_pid"
write_log "xss-lock killed"
[ -n "$DBGOUT" ] && printf '%s: %s\n' "${myname} killed" "xss-lock"
write_log "terminating."
